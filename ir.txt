;
; Load and Store
;
<result> = load <ty>* <pointer>[, align <alignment>]
store <ty> <value>, <ty>* <pointer>[, align <alignment>]

;
; return, conditional and unconditional branch, 
;
ret <type> <value>  ; return value from function
br i1 <cond>, label <iftrue>, label <iffalse>  ; branch
br label <dest>   ; Unconditional branch

;
; function call
;
<result> = [tail] call <ty> [<fnty>*] <fnptrval>(<function args>)

;
; compare
;
<result> = icmp <cond> <ty> <op1>, <op2>    
<result> = fcmp <cond> <ty> <op1>, <op2> 

;
; arithmetic op's
; unary op -x is implementation as 0-x
;
<result> = add <ty> <op1>, <op2>   
<result> = fadd <ty> <op1>, <op2>
<result> = sub <ty> <op1>, <op2>  
<result> = sub i32 0, %val        ; for neg
<result> = fsub <ty> <op1>, <op2>  
<result> = fsub float -0.0, %val  for neg
<result> = mul <ty> <op1>, <op2>      
<result> = fmul <ty> <op1>, <op2>  
<result> = sdiv <ty> <op1>, <op2>  
<result> = fdiv <ty> <op1>, <op2>
<result> = srem <ty> <op1>, <op2>  
<result> = frem <ty> <op1>, <op2> 

;
; converting between float's and signed integers
;
<result> = fptosi <ty> <value> to <ty2>
<result> = sitofp <ty> <value> to <ty2>
